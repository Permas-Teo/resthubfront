{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { API_HOST } from '../../consts';\nimport { loadState, removeState, saveState } from '../localStorage';\nconst USER_STATE_KEY = 'user';\nconst persistedUser = loadState(USER_STATE_KEY);\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState: persistedUser,\n  reducers: {\n    setUser: (state, action) => action.payload\n  }\n});\nexport const {\n  setUser\n} = userSlice.actions;\nexport const loginUser = (email, password) => dispatch => {\n  fetch(`${API_HOST}/user/login/${email}`, {\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    method: 'POST',\n    body: JSON.stringify({\n      password\n    })\n  }).then(response => response.json()).then(result => {\n    console.log(result);\n\n    if (result.status === 'success') {\n      saveState(USER_STATE_KEY, result.data);\n      dispatch(setUser(result.data));\n    } else {\n      throw new Error(result.message);\n    }\n  }).catch(err => alert(err));\n};\nexport const signoutUser = () => dispatch => {\n  removeState(USER_STATE_KEY);\n  dispatch(setUser(null));\n};\nexport const signupUser = (email, password, nickname) => dispatch => {\n  fetch(`${API_HOST}/user`, {\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    method: 'POST',\n    body: JSON.stringify({\n      email,\n      password,\n      nickname\n    })\n  }).then(response => response.json()).then(result => {\n    if (result.status === 'success') {\n      saveState(USER_STATE_KEY, result.data);\n      dispatch(setUser(result.data));\n    } else {\n      throw new Error(result.message);\n    }\n  }).catch(err => alert(err));\n};\nexport const selectUser = state => state.user;\nexport default userSlice.reducer;","map":{"version":3,"sources":["/home/permas/cs3219-ay2021-s1-project-2020-s1-g23/frontend/src/redux/slices/userSlice.js"],"names":["createSlice","API_HOST","loadState","removeState","saveState","USER_STATE_KEY","persistedUser","userSlice","name","initialState","reducers","setUser","state","action","payload","actions","loginUser","email","password","dispatch","fetch","headers","method","body","JSON","stringify","then","response","json","result","console","log","status","data","Error","message","catch","err","alert","signoutUser","signupUser","nickname","selectUser","user","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { API_HOST } from '../../consts';\nimport { loadState, removeState, saveState } from '../localStorage';\n\nconst USER_STATE_KEY = 'user';\nconst persistedUser = loadState(USER_STATE_KEY);\n\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState: persistedUser,\n  reducers: {\n    setUser: (state, action) => action.payload,\n  },\n});\n\nexport const { setUser } = userSlice.actions;\n\nexport const loginUser = (email, password) => (dispatch) => {\n  fetch(`${API_HOST}/user/login/${email}`, {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    method: 'POST',\n    body: JSON.stringify({ password }),\n  })\n    .then((response) => response.json())\n    .then((result) => {\n      console.log(result);\n      if (result.status === 'success') {\n        saveState(USER_STATE_KEY, result.data);\n        dispatch(setUser(result.data));\n      } else {\n        throw new Error(result.message);\n      }\n    })\n    .catch((err) => alert(err));\n};\n\nexport const signoutUser = () => (dispatch) => {\n  removeState(USER_STATE_KEY);\n  dispatch(setUser(null));\n};\n\nexport const signupUser = (email, password, nickname) => (dispatch) => {\n  fetch(`${API_HOST}/user`, {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    method: 'POST',\n    body: JSON.stringify({ email, password, nickname }),\n  })\n    .then((response) => response.json())\n    .then((result) => {\n      if (result.status === 'success') {\n        saveState(USER_STATE_KEY, result.data);\n        dispatch(setUser(result.data));\n      } else {\n        throw new Error(result.message);\n      }\n    })\n    .catch((err) => alert(err));\n};\n\nexport const selectUser = (state) => state.user;\n\nexport default userSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}