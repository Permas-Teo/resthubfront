{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { API_HOST } from '../../consts';\nimport { loadState, removeState, saveState } from '../localStorage';\nconst CONTACT_STATE_KEY = 'contact';\nconst persistedContact = loadState(CONTACT_STATE_KEY);\nexport const contactSlice = createSlice({\n  name: 'contact',\n  initialState: persistedContact,\n  reducers: {\n    setContact: (state, action) => action.payload\n  }\n});\nexport const {\n  setContact\n} = contactSlice.actions;\nexport const displayContact = (email, password) => dispatch => {\n  const apiUrl = `${API_HOST}/contact/login/${email}`; // console.log(apiUrl);\n\n  fetch(apiUrl, {\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    method: 'POST',\n    body: JSON.stringify({\n      password\n    })\n  }).then(response => response.json()).then(result => {\n    // console.log(result);\n    if (result.status === 'success') {\n      saveState(CONTACT_STATE_KEY, result.data);\n      dispatch(setContact(result.data));\n    } else {\n      throw new Error(result.message);\n    }\n  }).catch(err => console.log(err));\n};\nexport const clearContact = () => dispatch => {\n  removeState(CONTACT_STATE_KEY);\n  dispatch(setContact(null));\n};\nexport const signupContact = (email, password, nickname) => dispatch => {\n  fetch(`${API_HOST}/contact/contact`, {\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    method: 'POST',\n    body: JSON.stringify({\n      email,\n      password,\n      nickname\n    })\n  }).then(response => response.json()).then(result => {\n    if (result.status === 'success') {\n      saveState(CONTACT_STATE_KEY, result.data);\n      dispatch(setContact(result.data));\n    } else {\n      throw new Error(result.message);\n    }\n  }).catch(err => console.log(err));\n};\nexport const selectContact = state => state.contact;\nexport default contactSlice.reducer;","map":{"version":3,"sources":["/home/permas/resthub/frontend/src/redux/slices/contactSlice.js"],"names":["createSlice","API_HOST","loadState","removeState","saveState","CONTACT_STATE_KEY","persistedContact","contactSlice","name","initialState","reducers","setContact","state","action","payload","actions","displayContact","email","password","dispatch","apiUrl","fetch","headers","method","body","JSON","stringify","then","response","json","result","status","data","Error","message","catch","err","console","log","clearContact","signupContact","nickname","selectContact","contact","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { API_HOST } from '../../consts';\nimport { loadState, removeState, saveState } from '../localStorage';\n\nconst CONTACT_STATE_KEY = 'contact';\nconst persistedContact = loadState(CONTACT_STATE_KEY);\n\nexport const contactSlice = createSlice({\n  name: 'contact',\n  initialState: persistedContact,\n  reducers: {\n    setContact: (state, action) => action.payload,\n  },\n});\n\nexport const { setContact } = contactSlice.actions;\n\nexport const displayContact = (email, password) => (dispatch) => {\n\n  const apiUrl = `${API_HOST}/contact/login/${email}`;\n  // console.log(apiUrl);\n  fetch(apiUrl, {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    method: 'POST',\n    body: JSON.stringify({ password }),\n  })\n    .then((response) => response.json())\n    .then((result) => {\n      // console.log(result);\n      if (result.status === 'success') {\n        saveState(CONTACT_STATE_KEY, result.data);\n        dispatch(setContact(result.data));\n      } else {\n        throw new Error(result.message);\n      }\n    })\n    .catch((err) => console.log(err));\n};\n\nexport const clearContact = () => (dispatch) => {\n  removeState(CONTACT_STATE_KEY);\n  dispatch(setContact(null));\n};\n\nexport const signupContact = (email, password, nickname) => (dispatch) => {\n  fetch(`${API_HOST}/contact/contact`, {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    method: 'POST',\n    body: JSON.stringify({ email, password, nickname }),\n  })\n    .then((response) => response.json())\n    .then((result) => {\n      if (result.status === 'success') {\n        saveState(CONTACT_STATE_KEY, result.data);\n        dispatch(setContact(result.data));\n      } else {\n        throw new Error(result.message);\n      }\n    })\n    .catch((err) => console.log(err));\n};\n\nexport const selectContact = (state) => state.contact;\n\nexport default contactSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}