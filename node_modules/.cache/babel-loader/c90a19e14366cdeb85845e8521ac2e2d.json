{"ast":null,"code":"var _jsxFileName = \"/home/permas/resthub/frontend/src/Pages/HomePage.js\";\nimport React, { useState } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport Layout from '../Templates/Layout';\nimport { getContacts, clearContacts } from '../redux/slices/contactsSlice';\nimport { API_HOST } from '../consts';\n\nconst HomePage = () => {\n  const initialState = {\n    topName: '',\n    botName: '',\n    botGender: '',\n    botEmail: '',\n    botPhone: '',\n    botMessage: ''\n  };\n  const [myData, setMyData] = useState(initialState);\n  const [error, setError] = useState('');\n  const [errorBot, setErrorBot] = useState('');\n  const [name, setName] = useState('');\n  const [gender, setGender] = useState('');\n  const [email, setEmail] = useState('');\n  const [phone, setPhone] = useState('');\n  const [message, setMessage] = useState('');\n  const [toggle, setToggle] = useState(0);\n\n  function getErrorFindContact(myData) {\n    if (myData.topName == \"\") {\n      return \"Cannot be empty\";\n    }\n\n    return \"\";\n  }\n\n  function getErrorPostContact(myData) {\n    if (myData.botName == \"\") {\n      return \"Add Contact: Name Field cannot be empty.\";\n    } else if (myData.botEmail == \"\") {\n      return \"Add Contact: Email Field cannot be empty.\";\n    }\n\n    return \"\";\n  }\n\n  const ContactComponent = () => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container fixed-bg-3 text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"text-center display-4 pb-5 pt-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 7\n      }\n    }, message), \" \", toggle == 1 ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"fixed-bg-question\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }\n    }, \"Name: \", name), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }\n    }, \"Email: \", email), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }\n    }, \"Gender: \", gender), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }\n    }, \"Phone: \", phone)) : /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }\n    }));\n  };\n\n  const dispatch = useDispatch();\n  const history = useHistory(); // update  fields\n\n  const handleChange = ({\n    target: {\n      value,\n      name\n    }\n  }) => {\n    setMyData({ ...myData,\n      [name]: value\n    });\n  }; // // update  fields\n  // const updateMyData = (name, value) => {\n  //   setMyData({ ...myData, [name]: value });\n  // };\n\n\n  function handleClickGetContacts() {\n    // dispatch(clearContact());\n    dispatch(getContacts());\n    history.push(\"/allcontacts\");\n  }\n\n  ;\n\n  function resetFields() {\n    setName(\"\");\n    setEmail(\"\");\n    setPhone(\"\");\n    setGender(\"\");\n    setMessage(\"\");\n    setToggle(0);\n  }\n\n  function handleClickGetContact() {\n    resetFields();\n    const errorMsg = getErrorFindContact(myData);\n\n    if (!errorMsg) {\n      setError('');\n      const apiUrl = `${API_HOST}/api/contacts/${myData.topName}`;\n      fetch(apiUrl, {\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        method: 'GET'\n      }).then(response => response.json()).then(result => {\n        setMessage(result.message);\n\n        if (result.data) {\n          setToggle(1);\n          setName(result.data.name);\n          setEmail(result.data.email);\n          setPhone(result.data.phone);\n          setGender(result.data.gender);\n        }\n      }).catch(err => console.log(err));\n    } else {\n      setError(errorMsg);\n    }\n  }\n\n  ;\n\n  function handleClickDeleteContact() {\n    resetFields();\n    const errorMsg = getErrorFindContact(myData);\n\n    if (!errorMsg) {\n      setError('');\n      const apiUrl = `${API_HOST}/api/contacts/${myData.topName}`;\n      fetch(apiUrl, {\n        method: 'DELETE'\n      }).then(response => response.json()).then(result => {\n        // console.log(result);\n        setMessage(result.message);\n      }).catch(err => setMessage(\"Contact deleted successfully\"));\n    } else {\n      setError(errorMsg);\n    }\n  }\n\n  ;\n\n  function handleClickPostContact() {\n    resetFields();\n    const errorMsg = getErrorPostContact(myData);\n\n    if (!errorMsg) {\n      setErrorBot('');\n      const apiUrl = `${API_HOST}/api/contacts`;\n      fetch(apiUrl, {\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        method: 'POST',\n        body: JSON.stringify({\n          \"name\": myData.botName,\n          \"email\": myData.botEmail,\n          \"phone\": myData.botPhone,\n          \"gender\": myData.botGender\n        })\n      }).then(response => response.json()).then(result => {\n        if (result.name == \"MongoError\") {\n          setMessage(\"Failed to add contact: Duplicate Name\");\n          return;\n        }\n\n        setMessage(result.message);\n\n        if (result.data) {\n          setToggle(1);\n          setName(result.data.name);\n          setEmail(result.data.email);\n          setPhone(result.data.phone);\n          setGender(result.data.gender);\n        }\n      }).catch(err => console.log(err));\n    } else {\n      setErrorBot(errorMsg);\n    }\n  }\n\n  ;\n\n  function handleClickPutContact() {\n    resetFields();\n    const errorMsg = getErrorPostContact(myData);\n\n    if (!errorMsg) {\n      setErrorBot('');\n      const apiUrl = `${API_HOST}/api/contacts/${myData.botName}`;\n      fetch(apiUrl, {\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        method: 'PUT',\n        body: JSON.stringify({\n          \"name\": myData.botName,\n          \"email\": myData.botEmail,\n          \"phone\": myData.botPhone,\n          \"gender\": myData.botGender\n        })\n      }).then(response => response.json()).then(result => {\n        console.log(result);\n\n        if (result.name == \"MongoError\") {\n          setMessage(\"Failed to add contact: Duplicate Name\");\n          return;\n        }\n\n        setMessage(result.message);\n\n        if (result.data) {\n          setToggle(1);\n          setName(result.data.name);\n          setEmail(result.data.email);\n          setPhone(result.data.phone);\n          setGender(result.data.gender);\n        }\n      }).catch(err => console.log(err));\n    } else {\n      setErrorBot(errorMsg);\n    }\n  }\n\n  ;\n  return /*#__PURE__*/React.createElement(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container fixed-bg-3 text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"text-center display-4 pb-5 pt-5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 9\n    }\n  }, \"RestHub\"), /*#__PURE__*/React.createElement(Button, {\n    variant: \"primary\",\n    size: \"lg\",\n    className: \"pp-button-long mb-5\",\n    onClick: handleClickGetContacts,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 9\n    }\n  }, \"View All Contacts\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"break\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    className: \"input-top\",\n    name: \"topName\",\n    type: \"text\",\n    onChange: handleChange,\n    placeholder: \"Contact Name (to find/delete contact by name)\",\n    value: myData.topName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"error-message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 11\n    }\n  }, error)), /*#__PURE__*/React.createElement(Button, {\n    variant: \"primary\",\n    size: \"lg\",\n    className: \"pp-button\",\n    onClick: handleClickGetContact,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 9\n    }\n  }, \"Find Contact\"), /*#__PURE__*/React.createElement(Button, {\n    variant: \"primary\",\n    size: \"lg\",\n    className: \"pp-button ml-3\",\n    onClick: handleClickDeleteContact,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 9\n    }\n  }, \"Delete Contact\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"break\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    className: \"input-top mt-5\",\n    name: \"botName\",\n    type: \"text\",\n    onChange: handleChange,\n    placeholder: \"Name\",\n    value: myData.botName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"input-top\",\n    name: \"botGender\",\n    type: \"text\",\n    onChange: handleChange,\n    placeholder: \"Gender\",\n    value: myData.botGender,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"input-top\",\n    name: \"botEmail\",\n    type: \"text\",\n    onChange: handleChange,\n    placeholder: \"Email\",\n    value: myData.botEmail,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"input-top mb-5\",\n    name: \"botPhone\",\n    type: \"text\",\n    onChange: handleChange,\n    placeholder: \"Phone\",\n    value: myData.botPhone,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    variant: \"primary\",\n    size: \"lg\",\n    className: \"pp-button\",\n    onClick: handleClickPostContact,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 9\n    }\n  }, \"Add Contact\"), /*#__PURE__*/React.createElement(Button, {\n    variant: \"primary\",\n    size: \"lg\",\n    className: \"pp-button ml-3\",\n    onClick: handleClickPutContact,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 9\n    }\n  }, \"Update Contact\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"error-message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 9\n    }\n  }, errorBot), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(ContactComponent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default HomePage;","map":{"version":3,"sources":["/home/permas/resthub/frontend/src/Pages/HomePage.js"],"names":["React","useState","Button","useDispatch","useHistory","Layout","getContacts","clearContacts","API_HOST","HomePage","initialState","topName","botName","botGender","botEmail","botPhone","botMessage","myData","setMyData","error","setError","errorBot","setErrorBot","name","setName","gender","setGender","email","setEmail","phone","setPhone","message","setMessage","toggle","setToggle","getErrorFindContact","getErrorPostContact","ContactComponent","dispatch","history","handleChange","target","value","handleClickGetContacts","push","resetFields","handleClickGetContact","errorMsg","apiUrl","fetch","headers","method","then","response","json","result","data","catch","err","console","log","handleClickDeleteContact","handleClickPostContact","body","JSON","stringify","handleClickPutContact"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\n\nimport Layout from '../Templates/Layout';\nimport { getContacts, clearContacts } from '../redux/slices/contactsSlice';\n\nimport { API_HOST } from '../consts';\n\n\n\nconst HomePage = () => {\n  const initialState = { topName: '', botName: '', botGender: '', botEmail: '', botPhone: '', botMessage: '', };\n  const [myData, setMyData] = useState(initialState);\n  const [error, setError] = useState('');\n  const [errorBot, setErrorBot] = useState('');\n\n\n  const [name, setName] = useState('');\n  const [gender, setGender] = useState('');\n  const [email, setEmail] = useState('');\n  const [phone, setPhone] = useState('');\n  const [message, setMessage] = useState('');\n  const [toggle, setToggle] = useState(0);\n\n  function getErrorFindContact(myData) {\n    if (myData.topName == \"\") {\n      return \"Cannot be empty\";\n    }\n    return \"\";\n  }\n  \n  function getErrorPostContact(myData) {\n    if (myData.botName == \"\") {\n      return \"Add Contact: Name Field cannot be empty.\";\n    } else if (myData.botEmail == \"\") {\n      return \"Add Contact: Email Field cannot be empty.\";\n    }\n    return \"\";\n  }\n\n  const ContactComponent = () => {\n    return (\n      <div className=\"container fixed-bg-3 text-center\">\n      <h1 className=\"text-center display-4 pb-5 pt-5\">{message}</h1> {/*{contact[\"message\"]} */}\n\n      {(toggle == 1) ? (\n      <div className=\"fixed-bg-question\">\n          <h3>Name: {name}</h3>\n          <h3>Email: {email}</h3>\n          <h3>Gender: {gender}</h3>\n          <h3>Phone: {phone}</h3>\n        </div>\n      ) : <div/>}\n\n      </div>\n\n    );\n  };\n\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  // update  fields\n  const handleChange = ({ target: { value, name } }) => {\n    setMyData({ ...myData, [name]: value });\n  };\n\n  // // update  fields\n  // const updateMyData = (name, value) => {\n  //   setMyData({ ...myData, [name]: value });\n  // };\n\n  function handleClickGetContacts() {\n      // dispatch(clearContact());\n      dispatch(getContacts());\n      history.push(\"/allcontacts\");\n  };\n\n  function resetFields() {\n    setName(\"\");  \n    setEmail(\"\");  \n    setPhone(\"\");  \n    setGender(\"\"); \n    setMessage(\"\") \n    setToggle(0);\n\n  }\n\n  function handleClickGetContact() {\n    resetFields();\n    const errorMsg = getErrorFindContact(myData);\n    if (!errorMsg) {\n      setError('');\n      const apiUrl = `${API_HOST}/api/contacts/${myData.topName}`; \n      fetch(apiUrl, {\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        method: 'GET',\n        })\n          .then((response) => response.json())\n          .then((result) => {\n            setMessage(result.message);  \n            if (result.data) {\n              setToggle(1);\n              setName(result.data.name);  \n              setEmail(result.data.email);  \n              setPhone(result.data.phone);  \n              setGender(result.data.gender);  \n            }\n            \n          })\n          .catch((err) => console.log(err)\n        );\n      } else {\n        setError(errorMsg);\n      }\n  };\n\n  function handleClickDeleteContact() {\n    resetFields();\n    const errorMsg = getErrorFindContact(myData);\n    if (!errorMsg) {\n      setError('');\n      const apiUrl = `${API_HOST}/api/contacts/${myData.topName}`; \n      fetch(apiUrl, {\n        method: 'DELETE',\n        })\n          .then((response) => response.json())\n          .then((result) => {\n            // console.log(result);\n            setMessage(result.message);              \n          })\n          .catch((err) => setMessage(\"Contact deleted successfully\")\n        );\n      } else {\n        setError(errorMsg);\n      }\n  };\n\n  function handleClickPostContact() {\n    resetFields();\n    const errorMsg = getErrorPostContact(myData);\n    if (!errorMsg) {\n      setErrorBot('');\n      const apiUrl = `${API_HOST}/api/contacts`; \n      fetch(apiUrl, {\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        method: 'POST',\n        body: JSON.stringify({ \"name\":myData.botName, \"email\":myData.botEmail, \"phone\":myData.botPhone, \"gender\":myData.botGender }),\n        })\n          .then((response) => response.json())\n          .then((result) => {\n            if (result.name == \"MongoError\") {\n              setMessage(\"Failed to add contact: Duplicate Name\");  \n              return;\n            }\n            setMessage(result.message);  \n            if (result.data) {\n              setToggle(1);\n              setName(result.data.name);  \n              setEmail(result.data.email);  \n              setPhone(result.data.phone);  \n              setGender(result.data.gender);  \n            }\n            \n          })\n          .catch((err) => console.log(err)\n        );\n      } else {\n        setErrorBot(errorMsg);\n      }\n  };\n\n  function handleClickPutContact() {\n    resetFields();\n    const errorMsg = getErrorPostContact(myData);\n    if (!errorMsg) {\n      setErrorBot('');\n      const apiUrl = `${API_HOST}/api/contacts/${myData.botName}`; \n      fetch(apiUrl, {\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        method: 'PUT',\n        body: JSON.stringify({ \"name\":myData.botName, \"email\":myData.botEmail, \"phone\":myData.botPhone, \"gender\":myData.botGender }),\n        })\n          .then((response) => response.json())\n          .then((result) => {\n            console.log(result);\n            if (result.name == \"MongoError\") {\n              setMessage(\"Failed to add contact: Duplicate Name\");  \n              return;\n            }\n            setMessage(result.message);  \n            if (result.data) {\n              setToggle(1);\n              setName(result.data.name);  \n              setEmail(result.data.email);  \n              setPhone(result.data.phone);  \n              setGender(result.data.gender);  \n            }\n            \n          })\n          .catch((err) => console.log(err)\n        );\n      } else {\n        setErrorBot(errorMsg);\n      }\n  };\n\n  return (\n    <Layout>\n      <div className=\"container fixed-bg-3 text-center\">\n        <h1 className=\"text-center display-4 pb-5 pt-5\">RestHub</h1>\n        <Button\n          variant=\"primary\"\n          size=\"lg\"\n          className=\"pp-button-long mb-5\"\n          onClick={handleClickGetContacts}\n        >View All Contacts\n        </Button>\n\n        <div className=\"break\"/>\n\n\n        <form>\n          <input\n            className=\"input-top\"\n            name=\"topName\"\n            type=\"text\"\n            onChange={handleChange}\n            placeholder=\"Contact Name (to find/delete contact by name)\"\n            value={myData.topName}\n          />\n          <p className=\"error-message\">{error}</p>\n        </form>\n        <Button\n          variant=\"primary\"\n          size=\"lg\"\n          className=\"pp-button\"\n          onClick={handleClickGetContact}\n        >Find Contact\n        </Button>\n        <Button\n          variant=\"primary\"\n          size=\"lg\"\n          className=\"pp-button ml-3\"\n          onClick={handleClickDeleteContact}\n        >Delete Contact\n        </Button>\n\n        <div className=\"break\"/>\n\n        <form>\n          <input\n            className=\"input-top mt-5\"\n            name=\"botName\"\n            type=\"text\"\n            onChange={handleChange}\n            placeholder=\"Name\"\n            value={myData.botName}\n          />\n          <br/>\n          <input\n            className=\"input-top\"\n            name=\"botGender\"\n            type=\"text\"\n            onChange={handleChange}\n            placeholder=\"Gender\"\n            value={myData.botGender}\n          />\n          <br/>\n          <input\n            className=\"input-top\"\n            name=\"botEmail\"\n            type=\"text\"\n            onChange={handleChange}\n            placeholder=\"Email\"\n            value={myData.botEmail}\n          />\n          <br/>\n          <input\n            className=\"input-top mb-5\"\n            name=\"botPhone\"\n            type=\"text\"\n            onChange={handleChange}\n            placeholder=\"Phone\"\n            value={myData.botPhone}\n          />\n        </form>\n        <Button\n          variant=\"primary\"\n          size=\"lg\"\n          className=\"pp-button\"\n          onClick={handleClickPostContact}\n        >Add Contact\n        </Button>\n        <Button\n          variant=\"primary\"\n          size=\"lg\"\n          className=\"pp-button ml-3\"\n          onClick={handleClickPutContact}\n        >Update Contact\n        </Button>\n        <p className=\"error-message\">{errorBot}</p>\n\n        \n        <br />\n      </div>\n\n      <ContactComponent/>\n\n    </Layout>\n  )};\n\nexport default HomePage;\n"]},"metadata":{},"sourceType":"module"}